{
  "address": "0xc25e079a84A7Af3015FA21db546b9c6c401a5a36",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "discount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "locktime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int128",
          "name": "_type",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "discount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Migrate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDelegate",
          "type": "bool"
        }
      ],
      "name": "SetDelegate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SetMigrator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "Supply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "discount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_t",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlock_time",
          "type": "uint256"
        }
      ],
      "name": "createLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_discount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlock_time",
          "type": "uint256"
        }
      ],
      "name": "createLockFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "getCheckpointTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getLastUserSlope",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increaseAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_discount",
          "type": "uint256"
        }
      ],
      "name": "increaseAmountFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unlock_time",
          "type": "uint256"
        }
      ],
      "name": "increaseUnlockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isDelegate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "int128",
          "name": "amount",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "discount",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "migrated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pointHistory",
      "outputs": [
        {
          "internalType": "int128",
          "name": "bias",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "slope",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isDelegate",
          "type": "bool"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "slopeChanges",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "unlockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPointEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userPointHistory",
      "outputs": [
        {
          "internalType": "int128",
          "name": "bias",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "slope",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x64b993bdf4404867e98feefe10b5a6f7c6ece42902d572ecb8e23a95ced2b9fb",
  "receipt": {
    "to": null,
    "from": "0x5b8C253517b6Bd003369173109693B01cb6841B5",
    "contractAddress": "0xc25e079a84A7Af3015FA21db546b9c6c401a5a36",
    "transactionIndex": 30,
    "gasUsed": "3221889",
    "logsBloom": "0x
    "blockHash": "0x854e79f1264f9740baf67dafe59aa9f06730fddbbb07b5a9b88a326de47bfe56",
    "transactionHash": "0x64b993bdf4404867e98feefe10b5a6f7c6ece42902d572ecb8e23a95ced2b9fb",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 14894354,
        "transactionHash": "0x64b993bdf4404867e98feefe10b5a6f7c6ece42902d572ecb8e23a95ced2b9fb",
        "address": "0xc25e079a84A7Af3015FA21db546b9c6c401a5a36",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005b8c253517b6bd003369173109693b01cb6841b5"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0x854e79f1264f9740baf67dafe59aa9f06730fddbbb07b5a9b88a326de47bfe56"
      }
    ],
    "blockNumber": 14894354,
    "cumulativeGasUsed": "4734315",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf474E526ADe9aD2CC2B66ffCE528B1A51B91FCdC",
    "Voting-escrowed LEVX",
    "THANO$",
    259200,
    62985600
  ],
  "solcInputHash": "9c4443ed2f7a6eed2b1e1e6862325806",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"_type\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDelegate\",\"type\":\"bool\"}],\"name\":\"SetDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetMigrator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"createLockFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getCheckpointTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getLastUserSlope\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discount\",\"type\":\"uint256\"}],\"name\":\"increaseAmountFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"increaseUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDelegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"amount\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"discount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointHistory\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isDelegate\",\"type\":\"bool\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slopeChanges\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPointHistory\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"LevX (team@levx.io)\",\"details\":\"Vote weight decays linearly over time. Lock time cannot be      more than `MAXTIME`.Ported from vyper (https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/VotingEscrow.vy)\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\",\"params\":{\"_t\":\"Epoch time to return voting power at\",\"addr\":\"User wallet address\"},\"returns\":{\"_0\":\"User voting power\"}},\"balanceOfAt(address,uint256)\":{\"details\":\"Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime\",\"params\":{\"_block\":\"Block to calculate the voting power at\",\"addr\":\"User's wallet address\"},\"returns\":{\"_0\":\"Voting power\"}},\"cancel()\":{\"details\":\"Only possible if the lock exists\"},\"createLock(uint256,uint256)\":{\"params\":{\"_unlock_time\":\"Epoch time when tokens unlock, rounded down to whole weeks\",\"_value\":\"Amount to deposit\"}},\"createLockFor(address,uint256,uint256,uint256)\":{\"details\":\"Only delegates can creat a lock for someone else\",\"params\":{\"_addr\":\"User's wallet address\",\"_discount\":\"Amount to get discounted out of _value\",\"_unlock_time\":\"Epoch time when tokens unlock, rounded down to whole weeks\",\"_value\":\"Amount to add to user's lock\"}},\"depositFor(address,uint256)\":{\"details\":\"Anyone (even a smart contract) can deposit for someone else, but      cannot extend their locktime and deposit for a brand new user\",\"params\":{\"_addr\":\"User's wallet address\",\"_value\":\"Amount to add to user's lock\"}},\"getCheckpointTime(address,uint256)\":{\"params\":{\"_addr\":\"User wallet address\",\"_idx\":\"User epoch number\"},\"returns\":{\"_0\":\"Epoch time of the checkpoint\"}},\"getLastUserSlope(address)\":{\"params\":{\"addr\":\"Address of the user wallet\"},\"returns\":{\"_0\":\"Value of the slope\"}},\"increaseAmount(uint256)\":{\"params\":{\"_value\":\"Amount of tokens to deposit and add to the lock\"}},\"increaseAmountFor(address,uint256,uint256)\":{\"params\":{\"_addr\":\"User's wallet address\",\"_discount\":\"Amount to get discounted out of _value\",\"_value\":\"Amount of tokens to deposit and add to the lock\"}},\"increaseUnlockTime(uint256)\":{\"params\":{\"_unlock_time\":\"New epoch time for unlocking\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"totalSupply(uint256)\":{\"details\":\"Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\",\"returns\":{\"_0\":\"Total voting power\"}},\"totalSupplyAt(uint256)\":{\"params\":{\"_block\":\"Block to calculate the total voting power at\"},\"returns\":{\"_0\":\"Total voting power at `_block`\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlockTime(address)\":{\"params\":{\"_addr\":\"User wallet\"},\"returns\":{\"_0\":\"Epoch time of the lock end\"}},\"withdraw()\":{\"details\":\"Only possible if the lock has expired\"}},\"title\":\"Voting Escrow\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Get the current voting power for `msg.sender`\"},\"balanceOfAt(address,uint256)\":{\"notice\":\"Measure voting power of `addr` at block height `_block`\"},\"cancel()\":{\"notice\":\"Cancel the existing lock of `msg.sender` with penalty\"},\"checkpoint()\":{\"notice\":\"Record global data to checkpoint\"},\"createLock(uint256,uint256)\":{\"notice\":\"Deposit `_value` tokens for `msg.sender` and lock until `_unlock_time`\"},\"createLockFor(address,uint256,uint256,uint256)\":{\"notice\":\"Deposit `_value` tokens with `_discount` for `_addr` and lock until `_unlock_time`\"},\"depositFor(address,uint256)\":{\"notice\":\"Deposit `_value` tokens for `_addr` and add to the lock\"},\"getCheckpointTime(address,uint256)\":{\"notice\":\"Get the timestamp for checkpoint `_idx` for `_addr`\"},\"getLastUserSlope(address)\":{\"notice\":\"Get the most recently recorded rate of voting power decrease for `addr`\"},\"increaseAmount(uint256)\":{\"notice\":\"Deposit `_value` additional tokens for `msg.sender`          without modifying the unlock time\"},\"increaseAmountFor(address,uint256,uint256)\":{\"notice\":\"Deposit `_value` additional tokens for `msg.sender`          without modifying the unlock time\"},\"increaseUnlockTime(uint256)\":{\"notice\":\"Extend the unlock time for `msg.sender` to `_unlock_time`\"},\"totalSupply(uint256)\":{\"notice\":\"Calculate total voting power\"},\"totalSupplyAt(uint256)\":{\"notice\":\"Calculate total voting power at some point in the past\"},\"unlockTime(address)\":{\"notice\":\"Get timestamp when `_addr`'s lock finishes\"},\"withdraw()\":{\"notice\":\"Withdraw all tokens for `msg.sender`\"}},\"notice\":\"Votes have a weight depending on time, so that users are         committed to the future of (whatever they are voting for)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VotingEscrow.sol\":\"VotingEscrow\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/VotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IVotingEscrow.sol\\\";\\nimport \\\"./interfaces/IVotingEscrowMigrator.sol\\\";\\nimport \\\"./libraries/Integers.sol\\\";\\n\\n/**\\n * @title Voting Escrow\\n * @author LevX (team@levx.io)\\n * @notice Votes have a weight depending on time, so that users are\\n *         committed to the future of (whatever they are voting for)\\n * @dev Vote weight decays linearly over time. Lock time cannot be\\n *      more than `MAXTIME`.\\n * @dev Ported from vyper (https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/VotingEscrow.vy)\\n */\\n\\n// Voting escrow to have time-weighted votes\\n// Votes have a weight depending on time, so that users are committed\\n// to the future of (whatever they are voting for).\\n// The weight in this implementation is linear, and lock cannot be more than maxtime:\\n// w ^\\n// 1 +        /\\n//   |      /\\n//   |    /\\n//   |  /\\n//   |/\\n// 0 +--------+------> time\\n//       maxtime\\n\\ncontract VotingEscrow is Ownable, ReentrancyGuard, IVotingEscrow {\\n    using SafeERC20 for IERC20;\\n    using Integers for int128;\\n    using Integers for uint256;\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // - dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        int128 discount;\\n        uint256 duration;\\n        uint256 end;\\n    }\\n\\n    int128 internal constant DEPOSIT_FOR_TYPE = 0;\\n    int128 internal constant CRETE_LOCK_TYPE = 1;\\n    int128 internal constant INCREASE_LOCK_AMOUNT = 2;\\n    int128 internal constant INCREASE_UNLOCK_TIME = 3;\\n    uint256 internal constant MULTIPLIER = 1e18;\\n\\n    uint256 public immutable override interval;\\n    uint256 public immutable override maxDuration;\\n    address public immutable override token;\\n    string public override name;\\n    string public override symbol;\\n    uint8 public immutable override decimals;\\n\\n    address public override migrator;\\n    mapping(address => bool) public override migrated;\\n    mapping(address => bool) public override isDelegate;\\n\\n    uint256 public override supply;\\n    mapping(address => LockedBalance) public override locked;\\n    uint256 public override epoch;\\n\\n    mapping(uint256 => Point) public override pointHistory; // epoch -> unsigned point\\n    mapping(address => mapping(uint256 => Point)) public override userPointHistory; // user -> Point[user_epoch]\\n    mapping(address => uint256) public override userPointEpoch;\\n    mapping(uint256 => int128) public override slopeChanges; // time -> signed slope change\\n\\n    constructor(\\n        address _token,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _interval,\\n        uint256 _maxDuration\\n    ) {\\n        token = _token;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = IERC20Metadata(_token).decimals();\\n\\n        interval = _interval;\\n        maxDuration = (_maxDuration / _interval) * _interval; // rounded down to a multiple of interval\\n\\n        pointHistory[0].blk = block.number;\\n        pointHistory[0].ts = block.timestamp;\\n    }\\n\\n    modifier beforeMigrated {\\n        require(!migrated[msg.sender], \\\"VE: LOCK_MIGRATED\\\");\\n        _;\\n    }\\n\\n    modifier calledByDelegate {\\n        require(isDelegate[msg.sender], \\\"VE: NOT_DELEGATE\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Check if the call is from an EOA or a whitelisted smart contract, revert if not\\n     */\\n    modifier authorized {\\n        if (msg.sender != tx.origin) {\\n            require(isDelegate[msg.sender], \\\"VE: CONTRACT_NOT_DELEGATE\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Get the most recently recorded rate of voting power decrease for `addr`\\n     * @param addr Address of the user wallet\\n     * @return Value of the slope\\n     */\\n    function getLastUserSlope(address addr) external view override returns (int128) {\\n        uint256 uepoch = userPointEpoch[addr];\\n        return userPointHistory[addr][uepoch].slope;\\n    }\\n\\n    /**\\n     * @notice Get the timestamp for checkpoint `_idx` for `_addr`\\n     * @param _addr User wallet address\\n     * @param _idx User epoch number\\n     * @return Epoch time of the checkpoint\\n     */\\n    function getCheckpointTime(address _addr, uint256 _idx) external view override returns (uint256) {\\n        return userPointHistory[_addr][_idx].ts;\\n    }\\n\\n    /**\\n     * @notice Get timestamp when `_addr`'s lock finishes\\n     * @param _addr User wallet\\n     * @return Epoch time of the lock end\\n     */\\n    function unlockTime(address _addr) external view override returns (uint256) {\\n        return locked[_addr].end;\\n    }\\n\\n    function setMigrator(address _migrator) external override onlyOwner {\\n        require(migrator == address(0), \\\"VE: MIGRATOR_SET\\\");\\n\\n        migrator = _migrator;\\n\\n        emit SetMigrator(_migrator);\\n    }\\n\\n    function setDelegate(address account, bool _isDelegate) external override onlyOwner {\\n        isDelegate[account] = _isDelegate;\\n\\n        emit SetDelegate(account, _isDelegate);\\n    }\\n\\n    /**\\n     * @notice Record global and per-user data to checkpoint\\n     * @param addr User's wallet address. No user checkpoint if 0x0\\n     * @param old_locked Pevious locked amount / end lock time for the user\\n     * @param new_locked New locked amount / end lock time for the user\\n     */\\n    function _checkpoint(\\n        address addr,\\n        LockedBalance memory old_locked,\\n        LockedBalance memory new_locked\\n    ) internal {\\n        Point memory u_old;\\n        Point memory u_new;\\n        int128 old_dslope;\\n        int128 new_dslope;\\n        uint256 _epoch = epoch;\\n\\n        if (addr != address(0)) {\\n            // Calculate slopes and biases\\n            // Kept at zero when they have to\\n            if (old_locked.end > block.timestamp && old_locked.amount > 0) {\\n                u_old.slope = old_locked.amount / maxDuration.toInt128();\\n                u_old.bias = u_old.slope * (old_locked.end - block.timestamp).toInt128();\\n            }\\n            if (new_locked.end > block.timestamp && new_locked.amount > 0) {\\n                u_new.slope = new_locked.amount / maxDuration.toInt128();\\n                u_new.bias = u_new.slope * (new_locked.end - block.timestamp).toInt128();\\n            }\\n\\n            // Read values of scheduled changes in the slope\\n            // old_locked.end can be in the past and in the future\\n            // new_locked.end can ONLY by in the FUTURE unless everything expired: than zeros\\n            old_dslope = slopeChanges[old_locked.end];\\n            if (new_locked.end != 0) {\\n                if (new_locked.end == old_locked.end) new_dslope = old_dslope;\\n                else new_dslope = slopeChanges[new_locked.end];\\n            }\\n        }\\n\\n        Point memory last_point = Point({bias: 0, slope: 0, ts: block.timestamp, blk: block.number});\\n        if (_epoch > 0) last_point = pointHistory[_epoch];\\n        uint256 last_checkpoint = last_point.ts;\\n        // initial_last_point is used for extrapolation to calculate block number\\n        // (approximately, for *At methods) and save them\\n        // as we cannot figure that out exactly from inside the contract\\n        Point memory initial_last_point = Point(last_point.bias, last_point.slope, last_point.ts, last_point.blk);\\n        uint256 block_slope; // dblock/dt\\n        if (block.timestamp > last_point.ts)\\n            block_slope = (MULTIPLIER * (block.number - last_point.blk)) / (block.timestamp - last_point.ts);\\n        // If last point is already recorded in this block, slope=0\\n        // But that's ok b/c we know the block in such case\\n\\n        {\\n            // Go over weeks to fill history and calculate what the current point is\\n            uint256 t_i = (last_checkpoint / interval) * interval;\\n            for (uint256 i; i < 255; i++) {\\n                // Hopefully it won't happen that this won't get used in 5 years!\\n                // If it does, users will be able to withdraw but vote weight will be broken\\n                t_i += interval;\\n                int128 d_slope;\\n                if (t_i > block.timestamp) t_i = block.timestamp;\\n                else d_slope = slopeChanges[t_i];\\n                last_point.bias -= last_point.slope * (t_i - last_checkpoint).toInt128();\\n                last_point.slope += d_slope;\\n                if (last_point.bias < 0)\\n                    // This can happen\\n                    last_point.bias = 0;\\n                if (last_point.slope < 0)\\n                    // This cannot happen - just in case\\n                    last_point.slope = 0;\\n                last_checkpoint = t_i;\\n                last_point.ts = t_i;\\n                last_point.blk = initial_last_point.blk + (block_slope * (t_i - initial_last_point.ts)) / MULTIPLIER;\\n                _epoch += 1;\\n                if (t_i == block.timestamp) {\\n                    last_point.blk = block.number;\\n                    break;\\n                } else pointHistory[_epoch] = last_point;\\n            }\\n        }\\n\\n        epoch = _epoch;\\n        // Now point_history is filled until t=now\\n\\n        if (addr != address(0)) {\\n            // If last point was in this block, the slope change has been applied already\\n            // But in such case we have 0 slope(s)\\n            last_point.slope += (u_new.slope - u_old.slope);\\n            last_point.bias += (u_new.bias - u_old.bias);\\n            if (last_point.slope < 0) last_point.slope = 0;\\n            if (last_point.bias < 0) last_point.bias = 0;\\n        }\\n\\n        // Record the changed point into history\\n        pointHistory[_epoch] = last_point;\\n\\n        if (addr != address(0)) {\\n            // Schedule the slope changes (slope is going down)\\n            // We subtract new_user_slope from [new_locked.end]\\n            // and add old_user_slope to [old_locked.end]\\n            if (old_locked.end > block.timestamp) {\\n                // old_dslope was <something> - u_old.slope, so we cancel that\\n                old_dslope += u_old.slope;\\n                if (new_locked.end == old_locked.end) old_dslope -= u_new.slope; // It was a new deposit, not extension\\n                slopeChanges[old_locked.end] = old_dslope;\\n            }\\n\\n            if (new_locked.end > block.timestamp) {\\n                if (new_locked.end > old_locked.end) {\\n                    new_dslope -= u_new.slope; // old slope disappeared at this point\\n                    slopeChanges[new_locked.end] = new_dslope;\\n                }\\n                // else: we recorded it already in old_dslope\\n            }\\n\\n            // Now handle user history\\n            uint256 user_epoch = userPointEpoch[addr] + 1;\\n\\n            userPointEpoch[addr] = user_epoch;\\n            u_new.ts = block.timestamp;\\n            u_new.blk = block.number;\\n            userPointHistory[addr][user_epoch] = u_new;\\n        }\\n    }\\n\\n    /**\\n     * @notice Deposit and lock tokens for a user\\n     * @param _addr User's wallet address\\n     * @param _value Amount to deposit\\n     * @param _discount Amount to get discounted out of _value\\n     * @param unlock_time New time when to unlock the tokens, or 0 if unchanged\\n     * @param locked_balance Previous locked amount / timestamp\\n     */\\n    function _depositFor(\\n        address _addr,\\n        uint256 _value,\\n        uint256 _discount,\\n        uint256 unlock_time,\\n        LockedBalance memory locked_balance,\\n        int128 _type\\n    ) internal {\\n        LockedBalance memory _locked = locked_balance;\\n        uint256 supply_before = supply;\\n\\n        supply = supply_before + _value;\\n        LockedBalance memory old_locked;\\n        (old_locked.amount, old_locked.discount, old_locked.duration, old_locked.end) = (\\n            _locked.amount,\\n            _locked.discount,\\n            _locked.duration,\\n            _locked.end\\n        );\\n        // Adding to existing lock, or if a lock is expired - creating a new one\\n        _locked.amount += (_value).toInt128();\\n        if (_discount != 0) _locked.discount += _discount.toInt128();\\n        if (unlock_time != 0) {\\n            _locked.duration = unlock_time - block.timestamp;\\n            _locked.end = unlock_time;\\n        }\\n        locked[_addr] = _locked;\\n\\n        // Possibilities:\\n        // Both old_locked.end could be current or expired (>/< block.timestamp)\\n        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\\n        // _locked.end > block.timestamp (always)\\n        _checkpoint(_addr, old_locked, _locked);\\n\\n        if (_value > _discount) {\\n            IERC20(token).safeTransferFrom(_addr, address(this), _value - _discount);\\n        }\\n\\n        emit Deposit(_addr, _value, _discount, _locked.end, _type, block.timestamp);\\n        emit Supply(supply_before, supply_before + _value);\\n    }\\n\\n    /**\\n     * @notice Record global data to checkpoint\\n     */\\n    function checkpoint() external override {\\n        _checkpoint(address(0), LockedBalance(0, 0, 0, 0), LockedBalance(0, 0, 0, 0));\\n    }\\n\\n    /**\\n     * @notice Deposit `_value` tokens for `_addr` and add to the lock\\n     * @dev Anyone (even a smart contract) can deposit for someone else, but\\n     *      cannot extend their locktime and deposit for a brand new user\\n     * @param _addr User's wallet address\\n     * @param _value Amount to add to user's lock\\n     */\\n    function depositFor(address _addr, uint256 _value) external override nonReentrant beforeMigrated {\\n        LockedBalance memory _locked = locked[_addr];\\n\\n        require(_value > 0, \\\"VE: INVALID_VALUE\\\");\\n        require(_locked.amount > 0, \\\"VE: LOCK_NOT_FOUND\\\");\\n        require(_locked.end > block.timestamp, \\\"VE: LOCK_EXPIRED\\\");\\n\\n        _depositFor(_addr, _value, 0, 0, _locked, DEPOSIT_FOR_TYPE);\\n    }\\n\\n    /**\\n     * @notice Deposit `_value` tokens with `_discount` for `_addr` and lock until `_unlock_time`\\n     * @dev Only delegates can creat a lock for someone else\\n     * @param _addr User's wallet address\\n     * @param _value Amount to add to user's lock\\n     * @param _discount Amount to get discounted out of _value\\n     * @param _unlock_time Epoch time when tokens unlock, rounded down to whole weeks\\n     */\\n    function createLockFor(\\n        address _addr,\\n        uint256 _value,\\n        uint256 _discount,\\n        uint256 _unlock_time\\n    ) external override nonReentrant calledByDelegate beforeMigrated {\\n        uint256 unlock_time = (_unlock_time / interval) * interval; // Locktime is rounded down to a multiple of interval\\n        LockedBalance memory _locked = locked[_addr];\\n\\n        require(_value > 0, \\\"VE: INVALID_VALUE\\\");\\n        require(_value >= _discount, \\\"VE: DISCOUNT_TOO_HIGH\\\");\\n        require(_locked.amount == 0, \\\"VE: EXISTING_LOCK_FOUND\\\");\\n        require(unlock_time > block.timestamp, \\\"VE: UNLOCK_TIME_TOO_EARLY\\\");\\n        require(unlock_time <= block.timestamp + maxDuration, \\\"VE: UNLOCK_TIME_TOO_LATE\\\");\\n\\n        _depositFor(_addr, _value, _discount, unlock_time, _locked, CRETE_LOCK_TYPE);\\n    }\\n\\n    /**\\n     * @notice Deposit `_value` tokens for `msg.sender` and lock until `_unlock_time`\\n     * @param _value Amount to deposit\\n     * @param _unlock_time Epoch time when tokens unlock, rounded down to whole weeks\\n     */\\n    function createLock(uint256 _value, uint256 _unlock_time) external override nonReentrant authorized beforeMigrated {\\n        uint256 unlock_time = (_unlock_time / interval) * interval; // Locktime is rounded down to a multiple of interval\\n        LockedBalance memory _locked = locked[msg.sender];\\n\\n        require(_value > 0, \\\"VE: INVALID_VALUE\\\");\\n        require(_locked.amount == 0, \\\"VE: EXISTING_LOCK_FOUND\\\");\\n        require(unlock_time > block.timestamp, \\\"VE: UNLOCK_TIME_TOO_EARLY\\\");\\n        require(unlock_time <= block.timestamp + maxDuration, \\\"VE: UNLOCK_TIME_TOO_LATE\\\");\\n\\n        _depositFor(msg.sender, _value, 0, unlock_time, _locked, CRETE_LOCK_TYPE);\\n    }\\n\\n    /**\\n     * @notice Deposit `_value` additional tokens for `msg.sender`\\n     *          without modifying the unlock time\\n     * @param _addr User's wallet address\\n     * @param _value Amount of tokens to deposit and add to the lock\\n     * @param _discount Amount to get discounted out of _value\\n     */\\n    function increaseAmountFor(\\n        address _addr,\\n        uint256 _value,\\n        uint256 _discount\\n    ) external override nonReentrant calledByDelegate beforeMigrated {\\n        LockedBalance memory _locked = locked[_addr];\\n\\n        require(_value > 0, \\\"VE: INVALID_VALUE\\\");\\n        require(_value >= _discount, \\\"VE: DISCOUNT_TOO_HIGH\\\");\\n        require(_locked.amount > 0, \\\"VE: LOCK_NOT_FOUND\\\");\\n        require(_locked.end > block.timestamp, \\\"VE: LOCK_EXPIRED\\\");\\n\\n        _depositFor(_addr, _value, _discount, 0, _locked, INCREASE_LOCK_AMOUNT);\\n    }\\n\\n    /**\\n     * @notice Deposit `_value` additional tokens for `msg.sender`\\n     *          without modifying the unlock time\\n     * @param _value Amount of tokens to deposit and add to the lock\\n     */\\n    function increaseAmount(uint256 _value) external override nonReentrant authorized beforeMigrated {\\n        LockedBalance memory _locked = locked[msg.sender];\\n\\n        require(_value > 0, \\\"VE: INVALID_VALUE\\\");\\n        require(_locked.amount > 0, \\\"VE: LOCK_NOT_FOUND\\\");\\n        require(_locked.end > block.timestamp, \\\"VE: LOCK_EXPIRED\\\");\\n\\n        _depositFor(msg.sender, _value, 0, 0, _locked, INCREASE_LOCK_AMOUNT);\\n    }\\n\\n    /**\\n     * @notice Extend the unlock time for `msg.sender` to `_unlock_time`\\n     * @param _unlock_time New epoch time for unlocking\\n     */\\n    function increaseUnlockTime(uint256 _unlock_time) external override nonReentrant authorized beforeMigrated {\\n        LockedBalance memory _locked = locked[msg.sender];\\n        uint256 unlock_time = (_unlock_time / interval) * interval; // Locktime is rounded down to a multiple of interval\\n\\n        require(_locked.end > block.timestamp, \\\"VE: LOCK_EXPIRED\\\");\\n        require(_locked.amount > 0, \\\"VE: LOCK_NOT_FOUND\\\");\\n        require(_locked.discount == 0, \\\"VE: LOCK_DISCOUNTED\\\");\\n        require(unlock_time > _locked.end, \\\"VE: UNLOCK_TIME_TOO_EARLY\\\");\\n        require(unlock_time <= block.timestamp + maxDuration, \\\"VE: UNLOCK_TIME_TOO_LATE\\\");\\n\\n        _depositFor(msg.sender, 0, 0, unlock_time, _locked, INCREASE_UNLOCK_TIME);\\n    }\\n\\n    /**\\n     * @notice Cancel the existing lock of `msg.sender` with penalty\\n     * @dev Only possible if the lock exists\\n     */\\n    function cancel() external override {\\n        LockedBalance memory _locked = locked[msg.sender];\\n        require(_locked.amount > 0, \\\"VE: LOCK_NOT_FOUND\\\");\\n        require(_locked.end > block.timestamp, \\\"VE: LOCK_EXPIRED\\\");\\n\\n        uint256 value = _locked.amount.toUint256();\\n        uint256 discount = _locked.discount.toUint256();\\n        require(value > discount, \\\"VE: FULLY_DISCOUNTED\\\");\\n\\n        locked[msg.sender] = LockedBalance(0, 0, 0, 0);\\n        uint256 supply_before = supply;\\n        supply = supply_before - value;\\n\\n        // old_locked can have either expired <= timestamp or zero end\\n        // _locked has only 0 end\\n        // Both can have >= 0 amount\\n        _checkpoint(msg.sender, _locked, LockedBalance(0, 0, 0, 0));\\n\\n        uint256 penalty = _penalty(value - discount, _locked.duration, _locked.end);\\n        IERC20(token).safeTransfer(msg.sender, value - discount - penalty);\\n\\n        emit Cancel(msg.sender, value, penalty, block.timestamp);\\n        emit Supply(supply_before, supply_before - value);\\n    }\\n\\n    function _penalty(\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 end\\n    ) internal view returns (uint256 penalty) {\\n        penalty = (amount * (end - block.timestamp)) / duration;\\n        if (penalty < amount / 2) penalty = amount / 2;\\n    }\\n\\n    /**\\n     * @notice Withdraw all tokens for `msg.sender`\\n     * @dev Only possible if the lock has expired\\n     */\\n    function withdraw() external override nonReentrant {\\n        LockedBalance memory _locked = locked[msg.sender];\\n        require(block.timestamp >= _locked.end, \\\"VE: LOCK_NOT_EXPIRED\\\");\\n\\n        uint256 value = _locked.amount.toUint256();\\n        uint256 discount = _locked.discount.toUint256();\\n\\n        locked[msg.sender] = LockedBalance(0, 0, 0, 0);\\n        uint256 supply_before = supply;\\n        supply = supply_before - value;\\n\\n        // old_locked can have either expired <= timestamp or zero end\\n        // _locked has only 0 end\\n        // Both can have >= 0 amount\\n        _checkpoint(msg.sender, _locked, LockedBalance(0, 0, 0, 0));\\n\\n        if (value > discount) {\\n            IERC20(token).safeTransfer(msg.sender, value - discount);\\n        }\\n\\n        emit Withdraw(msg.sender, value, discount, block.timestamp);\\n        emit Supply(supply_before, supply_before - value);\\n    }\\n\\n    function migrate() external override nonReentrant beforeMigrated {\\n        require(migrator != address(0), \\\"VE: MIGRATOR_NOT_SET\\\");\\n\\n        LockedBalance memory _locked = locked[msg.sender];\\n\\n        uint256 value = _locked.amount.toUint256();\\n        uint256 discount = _locked.discount.toUint256();\\n\\n        locked[msg.sender] = LockedBalance(0, 0, 0, 0);\\n        uint256 supply_before = supply;\\n        supply = supply_before - value;\\n\\n        // old_locked can have either expired <= timestamp or zero end\\n        // _locked has only 0 end\\n        // Both can have >= 0 amount\\n        _checkpoint(msg.sender, _locked, LockedBalance(0, 0, 0, 0));\\n\\n        migrated[msg.sender] = true;\\n        IVotingEscrowMigrator(migrator).migrate(\\n            msg.sender,\\n            _locked.amount,\\n            _locked.discount,\\n            _locked.duration,\\n            _locked.end\\n        );\\n\\n        if (value > discount) {\\n            IERC20(token).safeTransfer(migrator, value - discount);\\n        }\\n\\n        emit Migrate(msg.sender, value, discount, block.timestamp);\\n        emit Supply(supply_before, supply_before - value);\\n    }\\n\\n    // The following ERC20/minime-compatible methods are not real balanceOf and supply!\\n    // They measure the weights for the purpose of voting, so they don't represent\\n    // real coins.\\n\\n    /**\\n     * @notice Binary search to estimate timestamp for block number\\n     * @param _block Block to find\\n     * @param max_epoch Don't go beyond this epoch\\n     * @return Approximate timestamp for block\\n     */\\n    function _findBlockEpoch(uint256 _block, uint256 max_epoch) internal view returns (uint256) {\\n        uint256 _min;\\n        uint256 _max = max_epoch;\\n        for (uint256 i; i < 128; i++) {\\n            if (_min >= _max) break;\\n            uint256 _mid = (_min + _max + 1) / 2;\\n            if (pointHistory[_mid].blk <= _block) _min = _mid;\\n            else _max = _mid - 1;\\n        }\\n        return _min;\\n    }\\n\\n    function balanceOf(address addr) public view override returns (uint256) {\\n        return balanceOf(addr, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Get the current voting power for `msg.sender`\\n     * @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n     * @param addr User wallet address\\n     * @param _t Epoch time to return voting power at\\n     * @return User voting power\\n     */\\n    function balanceOf(address addr, uint256 _t) public view override returns (uint256) {\\n        uint256 _epoch = userPointEpoch[addr];\\n        if (_epoch == 0) return 0;\\n        else {\\n            Point memory last_point = userPointHistory[addr][_epoch];\\n            last_point.bias -= last_point.slope * (_t - last_point.ts).toInt128();\\n            if (last_point.bias < 0) last_point.bias = 0;\\n            return last_point.bias.toUint256();\\n        }\\n    }\\n\\n    /**\\n     * @notice Measure voting power of `addr` at block height `_block`\\n     * @dev Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime\\n     * @param addr User's wallet address\\n     * @param _block Block to calculate the voting power at\\n     * @return Voting power\\n     */\\n    function balanceOfAt(address addr, uint256 _block) external view override returns (uint256) {\\n        // Copying and pasting totalSupply code because Vyper cannot pass by\\n        // reference yet\\n        require(_block <= block.number);\\n\\n        // Binary search\\n        uint256 _min;\\n        uint256 _max = userPointEpoch[addr];\\n        for (uint256 i; i < 128; i++) {\\n            if (_min >= _max) break;\\n            uint256 _mid = (_min + _max + 1) / 2;\\n            if (userPointHistory[addr][_mid].blk <= _block) _min = _mid;\\n            else _max = _mid - 1;\\n        }\\n\\n        Point memory upoint = userPointHistory[addr][_min];\\n\\n        uint256 max_epoch = epoch;\\n        uint256 _epoch = _findBlockEpoch(_block, max_epoch);\\n        Point memory point_0 = pointHistory[_epoch];\\n        uint256 d_block;\\n        uint256 d_t;\\n        if (_epoch < max_epoch) {\\n            Point memory point_1 = pointHistory[_epoch + 1];\\n            d_block = point_1.blk - point_0.blk;\\n            d_t = point_1.ts - point_0.ts;\\n        } else {\\n            d_block = block.number - point_0.blk;\\n            d_t = block.timestamp - point_0.ts;\\n        }\\n        uint256 block_time = point_0.ts;\\n        if (d_block != 0) block_time += ((d_t * (_block - point_0.blk)) / d_block);\\n\\n        upoint.bias -= upoint.slope * (block_time - upoint.ts).toInt128();\\n        if (upoint.bias >= 0) return upoint.bias.toUint256();\\n        else return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate total voting power at some point in the past\\n     * @param point The point (bias/slope) to start search from\\n     * @param t Time to calculate the total voting power at\\n     * @return Total voting power at that time\\n     */\\n    function _supplyAt(Point memory point, uint256 t) internal view returns (uint256) {\\n        Point memory last_point = point;\\n        uint256 t_i = (last_point.ts / interval) * interval;\\n        for (uint256 i; i < 255; i++) {\\n            t_i += interval;\\n            int128 d_slope;\\n            if (t_i > t) t_i = t;\\n            else d_slope = slopeChanges[t_i];\\n            last_point.bias -= last_point.slope * (t_i - last_point.ts).toInt128();\\n            if (t_i == t) break;\\n            last_point.slope += d_slope;\\n            last_point.ts = t_i;\\n        }\\n\\n        if (last_point.bias < 0) last_point.bias = 0;\\n        return last_point.bias.toUint256();\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return totalSupply(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Calculate total voting power\\n     * @dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\\n     * @return Total voting power\\n     */\\n    function totalSupply(uint256 t) public view override returns (uint256) {\\n        uint256 _epoch = epoch;\\n        Point memory last_point = pointHistory[_epoch];\\n        return _supplyAt(last_point, t);\\n    }\\n\\n    /**\\n     * @notice Calculate total voting power at some point in the past\\n     * @param _block Block to calculate the total voting power at\\n     * @return Total voting power at `_block`\\n     */\\n    function totalSupplyAt(uint256 _block) external view override returns (uint256) {\\n        require(_block <= block.number);\\n        uint256 _epoch = epoch;\\n        uint256 target_epoch = _findBlockEpoch(_block, _epoch);\\n\\n        Point memory point = pointHistory[target_epoch];\\n        uint256 dt;\\n        if (target_epoch < _epoch) {\\n            Point memory point_next = pointHistory[target_epoch + 1];\\n            if (point.blk != point_next.blk)\\n                dt = ((_block - point.blk) * (point_next.ts - point.ts)) / (point_next.blk - point.blk);\\n        } else if (point.blk != block.number)\\n            dt = ((_block - point.blk) * (block.timestamp - point.ts)) / (block.number - point.blk);\\n        // Now dt contains info on how far are we beyond point\\n\\n        return _supplyAt(point, point.ts + dt);\\n    }\\n}\\n\",\"keccak256\":\"0x58b36659b563d19e757bbb16c46e0b08357c4bc6ea494ef560435d06fd4a2b9a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IVotingEscrow {\\n    event SetMigrator(address indexed account);\\n    event SetDelegate(address indexed account, bool isDelegate);\\n    event Deposit(\\n        address indexed provider,\\n        uint256 value,\\n        uint256 discount,\\n        uint256 indexed locktime,\\n        int128 _type,\\n        uint256 ts\\n    );\\n    event Cancel(address indexed provider, uint256 value, uint256 penalty, uint256 ts);\\n    event Withdraw(address indexed provider, uint256 value, uint256 discount, uint256 ts);\\n    event Migrate(address indexed provider, uint256 value, uint256 discount, uint256 ts);\\n    event Supply(uint256 prevSupply, uint256 supply);\\n\\n    function interval() external view returns (uint256);\\n\\n    function maxDuration() external view returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function migrator() external view returns (address);\\n\\n    function migrated(address account) external view returns (bool);\\n\\n    function isDelegate(address account) external view returns (bool);\\n\\n    function supply() external view returns (uint256);\\n\\n    function locked(address account)\\n        external\\n        view\\n        returns (\\n            int128 amount,\\n            int128 discount,\\n            uint256 duration,\\n            uint256 end\\n        );\\n\\n    function epoch() external view returns (uint256);\\n\\n    function pointHistory(uint256 epoch)\\n        external\\n        view\\n        returns (\\n            int128 bias,\\n            int128 slope,\\n            uint256 ts,\\n            uint256 blk\\n        );\\n\\n    function userPointHistory(address account, uint256 epoch)\\n        external\\n        view\\n        returns (\\n            int128 bias,\\n            int128 slope,\\n            uint256 ts,\\n            uint256 blk\\n        );\\n\\n    function userPointEpoch(address account) external view returns (uint256);\\n\\n    function slopeChanges(uint256 epoch) external view returns (int128);\\n\\n    function getLastUserSlope(address addr) external view returns (int128);\\n\\n    function getCheckpointTime(address _addr, uint256 _idx) external view returns (uint256);\\n\\n    function unlockTime(address _addr) external view returns (uint256);\\n\\n    function setMigrator(address _migrator) external;\\n\\n    function setDelegate(address account, bool _isDelegate) external;\\n\\n    function checkpoint() external;\\n\\n    function depositFor(address _addr, uint256 _value) external;\\n\\n    function createLockFor(\\n        address _addr,\\n        uint256 _value,\\n        uint256 _discount,\\n        uint256 _unlock_time\\n    ) external;\\n\\n    function createLock(uint256 _value, uint256 _unlock_time) external;\\n\\n    function increaseAmountFor(\\n        address _addr,\\n        uint256 _value,\\n        uint256 _discount\\n    ) external;\\n\\n    function increaseAmount(uint256 _value) external;\\n\\n    function increaseUnlockTime(uint256 _unlock_time) external;\\n\\n    function cancel() external;\\n\\n    function withdraw() external;\\n\\n    function migrate() external;\\n\\n    function balanceOf(address addr) external view returns (uint256);\\n\\n    function balanceOf(address addr, uint256 _t) external view returns (uint256);\\n\\n    function balanceOfAt(address addr, uint256 _block) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalSupply(uint256 t) external view returns (uint256);\\n\\n    function totalSupplyAt(uint256 _block) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x73245c91bb00ec4ae3a70f8a1e9aa8d73920a20e48c61842549b82723a9c1948\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVotingEscrowMigrator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IVotingEscrowMigrator {\\n    function migrate(\\n        address account,\\n        int128 amount,\\n        int128 discount,\\n        uint256 duration,\\n        uint256 end\\n    ) external;\\n\\n    function unlockTime(address _addr) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xabdd2a058d696c6e84e42bc56017f120d28abf153edb110c347bcdb26a3cc01e\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Integers.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nlibrary Integers {\\n    function toInt128(uint256 u) internal pure returns (int128) {\\n        return int128(int256(u));\\n    }\\n\\n    function toUint256(int128 i) internal pure returns (uint256) {\\n        return uint256(uint128(i));\\n    }\\n}\\n\",\"keccak256\":\"0x200ed6ff23c8df3b451d7446ed31f4f8f6fdf781118435d8a185c919d0065570\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "LevX (team@levx.io)",
    "details": "Vote weight decays linearly over time. Lock time cannot be      more than `MAXTIME`.Ported from vyper (https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/VotingEscrow.vy)",
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "Adheres to the ERC20 `balanceOf` interface for Aragon compatibility",
        "params": {
          "_t": "Epoch time to return voting power at",
          "addr": "User wallet address"
        },
        "returns": {
          "_0": "User voting power"
        }
      },
      "balanceOfAt(address,uint256)": {
        "details": "Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime",
        "params": {
          "_block": "Block to calculate the voting power at",
          "addr": "User's wallet address"
        },
        "returns": {
          "_0": "Voting power"
        }
      },
      "cancel()": {
        "details": "Only possible if the lock exists"
      },
      "createLock(uint256,uint256)": {
        "params": {
          "_unlock_time": "Epoch time when tokens unlock, rounded down to whole weeks",
          "_value": "Amount to deposit"
        }
      },
      "createLockFor(address,uint256,uint256,uint256)": {
        "details": "Only delegates can creat a lock for someone else",
        "params": {
          "_addr": "User's wallet address",
          "_discount": "Amount to get discounted out of _value",
          "_unlock_time": "Epoch time when tokens unlock, rounded down to whole weeks",
          "_value": "Amount to add to user's lock"
        }
      },
      "depositFor(address,uint256)": {
        "details": "Anyone (even a smart contract) can deposit for someone else, but      cannot extend their locktime and deposit for a brand new user",
        "params": {
          "_addr": "User's wallet address",
          "_value": "Amount to add to user's lock"
        }
      },
      "getCheckpointTime(address,uint256)": {
        "params": {
          "_addr": "User wallet address",
          "_idx": "User epoch number"
        },
        "returns": {
          "_0": "Epoch time of the checkpoint"
        }
      },
      "getLastUserSlope(address)": {
        "params": {
          "addr": "Address of the user wallet"
        },
        "returns": {
          "_0": "Value of the slope"
        }
      },
      "increaseAmount(uint256)": {
        "params": {
          "_value": "Amount of tokens to deposit and add to the lock"
        }
      },
      "increaseAmountFor(address,uint256,uint256)": {
        "params": {
          "_addr": "User's wallet address",
          "_discount": "Amount to get discounted out of _value",
          "_value": "Amount of tokens to deposit and add to the lock"
        }
      },
      "increaseUnlockTime(uint256)": {
        "params": {
          "_unlock_time": "New epoch time for unlocking"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "totalSupply(uint256)": {
        "details": "Adheres to the ERC20 `totalSupply` interface for Aragon compatibility",
        "returns": {
          "_0": "Total voting power"
        }
      },
      "totalSupplyAt(uint256)": {
        "params": {
          "_block": "Block to calculate the total voting power at"
        },
        "returns": {
          "_0": "Total voting power at `_block`"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlockTime(address)": {
        "params": {
          "_addr": "User wallet"
        },
        "returns": {
          "_0": "Epoch time of the lock end"
        }
      },
      "withdraw()": {
        "details": "Only possible if the lock has expired"
      }
    },
    "title": "Voting Escrow",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "Get the current voting power for `msg.sender`"
      },
      "balanceOfAt(address,uint256)": {
        "notice": "Measure voting power of `addr` at block height `_block`"
      },
      "cancel()": {
        "notice": "Cancel the existing lock of `msg.sender` with penalty"
      },
      "checkpoint()": {
        "notice": "Record global data to checkpoint"
      },
      "createLock(uint256,uint256)": {
        "notice": "Deposit `_value` tokens for `msg.sender` and lock until `_unlock_time`"
      },
      "createLockFor(address,uint256,uint256,uint256)": {
        "notice": "Deposit `_value` tokens with `_discount` for `_addr` and lock until `_unlock_time`"
      },
      "depositFor(address,uint256)": {
        "notice": "Deposit `_value` tokens for `_addr` and add to the lock"
      },
      "getCheckpointTime(address,uint256)": {
        "notice": "Get the timestamp for checkpoint `_idx` for `_addr`"
      },
      "getLastUserSlope(address)": {
        "notice": "Get the most recently recorded rate of voting power decrease for `addr`"
      },
      "increaseAmount(uint256)": {
        "notice": "Deposit `_value` additional tokens for `msg.sender`          without modifying the unlock time"
      },
      "increaseAmountFor(address,uint256,uint256)": {
        "notice": "Deposit `_value` additional tokens for `msg.sender`          without modifying the unlock time"
      },
      "increaseUnlockTime(uint256)": {
        "notice": "Extend the unlock time for `msg.sender` to `_unlock_time`"
      },
      "totalSupply(uint256)": {
        "notice": "Calculate total voting power"
      },
      "totalSupplyAt(uint256)": {
        "notice": "Calculate total voting power at some point in the past"
      },
      "unlockTime(address)": {
        "notice": "Get timestamp when `_addr`'s lock finishes"
      },
      "withdraw()": {
        "notice": "Withdraw all tokens for `msg.sender`"
      }
    },
    "notice": "Votes have a weight depending on time, so that users are         committed to the future of (whatever they are voting for)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 115,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3184,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3187,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3193,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "migrator",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3198,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "migrated",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3203,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "isDelegate",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3206,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "supply",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3212,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "locked",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(LockedBalance)3157_storage)"
      },
      {
        "astId": 3215,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "epoch",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3221,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "pointHistory",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Point)3148_storage)"
      },
      {
        "astId": 3229,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "userPointHistory",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Point)3148_storage))"
      },
      {
        "astId": 3234,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "userPointEpoch",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3239,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "slopeChanges",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_int128)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Point)3148_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct VotingEscrow.Point))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Point)3148_storage)"
      },
      "t_mapping(t_address,t_struct(LockedBalance)3157_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VotingEscrow.LockedBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedBalance)3157_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_int128)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int128)",
        "numberOfBytes": "32",
        "value": "t_int128"
      },
      "t_mapping(t_uint256,t_struct(Point)3148_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VotingEscrow.Point)",
        "numberOfBytes": "32",
        "value": "t_struct(Point)3148_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LockedBalance)3157_storage": {
        "encoding": "inplace",
        "label": "struct VotingEscrow.LockedBalance",
        "members": [
          {
            "astId": 3150,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 3152,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "discount",
            "offset": 16,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 3154,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "duration",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3156,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "end",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Point)3148_storage": {
        "encoding": "inplace",
        "label": "struct VotingEscrow.Point",
        "members": [
          {
            "astId": 3141,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "bias",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 3143,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "slope",
            "offset": 16,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 3145,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "ts",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3147,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "blk",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}